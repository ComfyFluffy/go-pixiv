package pixiv

import (
	"fmt"
	"strconv"
	"time"
)

// Restrict defines the restrict query field in fetching bookmark.
// It can be "public" or "private".
type Restrict string

// Restrict can be "public" or "private".
const (
	RPublic  Restrict = "public"
	RPrivate Restrict = "private"
	RAll     Restrict = "all"
)

// Type defines the type field of pixiv works.
type Type string

// Type of pixiv works.
const (
	TIllust Type = "illust"
	TManga  Type = "manga"
	TUgoira Type = "ugoira"
	TNovel  Type = "novel"
)

// Date defines the date format used in pixiv of format yyyy-mm-dd like 2000-04-01
type Date string

// NewDate returns new date with given year, month and day
func NewDate(year int, month int, day int) Date {
	return Date(fmt.Sprintf("%d-%02d-%02d", year, month, day))
}

// Year returns year in date
func (d Date) Year() int {
	l := len(d)
	if l >= 7 {
		y, _ := strconv.Atoi(string(d[:l-6]))
		return y
	}
	return 0
}

// Month returns month in date
func (d Date) Month() int {
	l := len(d)
	if l >= 5 {
		y, _ := strconv.Atoi(string(d[l-5 : l-3]))
		return y
	}
	return 0
}

// Day returns day in Date
func (d Date) Day() int {
	l := len(d)
	if l >= 2 {
		y, _ := strconv.Atoi(string(d[l-2:]))
		return y
	}
	return 0
}

// Generated by https://quicktype.io

// Profile is embedded in RespUserDetail
type Profile struct {
	Webpage string `json:"webpage"`
	Gender  string `json:"gender"`

	// Format: 1999-04-10
	Birth Date `json:"birth"`

	Region                     string `json:"region"`
	AddressID                  int    `json:"address_id"`
	CountryCode                string `json:"country_code"`
	Job                        string `json:"job"`
	JobID                      int    `json:"job_id"`
	TotalFollowUsers           int    `json:"total_follow_users"`
	TotalMypixivUsers          int    `json:"total_mypixiv_users"`
	TotalIllusts               int    `json:"total_illusts"`
	TotalManga                 int    `json:"total_manga"`
	TotalNovels                int    `json:"total_novels"`
	TotalIllustBookmarksPublic int    `json:"total_illust_bookmarks_public"`
	TotalIllustSeries          int    `json:"total_illust_series"`
	TotalNovelSeries           int    `json:"total_novel_series"`
	BackgroundImageURL         string `json:"background_image_url"`
	TwitterAccount             string `json:"twitter_account"`
	TwitterURL                 string `json:"twitter_url"`
	PawooURL                   string `json:"pawoo_url"`
	IsPremium                  bool   `json:"is_premium"`
	IsUsingCustomProfileImage  bool   `json:"is_using_custom_profile_image"`
}

// User may be embedded in Illust, Novel, Comment
type User struct {
	ID               int    `json:"id"`
	Name             string `json:"name"`
	Account          string `json:"account"`
	ProfileImageURLs struct {
		Medium string `json:"medium"`
	} `json:"profile_image_urls"`
	Comment    string `json:"comment"`
	IsFollowed bool   `json:"is_followed"`
}

// Illust is embedded in RespIllusts
type Illust struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
	Type  string `json:"type"`

	// Deprecated: Only contains the image URLs of the first page.
	// Use MetaSinglePage or MetaPages instead.
	ImageURLs ImageURLs `json:"image_urls"`

	Caption        string    `json:"caption"`
	Restrict       int       `json:"restrict"`
	User           User      `json:"user"`
	Tags           []Tag     `json:"tags"`
	Tools          []string  `json:"tools"`
	CreateDate     time.Time `json:"create_date"`
	PageCount      int       `json:"page_count"`
	Width          int       `json:"width"`
	Height         int       `json:"height"`
	SanityLevel    int       `json:"sanity_level"`
	XRestrict      int       `json:"x_restrict"`
	Series         Series    `json:"series"`
	MetaSinglePage struct {
		OriginalImageURL string `json:"original_image_url,omitempty"`
	} `json:"meta_single_page"`
	MetaPages []struct {
		ImageURLs ImageURLs `json:"image_urls"`
	} `json:"meta_pages"`
	TotalView      int  `json:"total_view"`
	TotalBookmarks int  `json:"total_bookmarks"`
	IsBookmarked   bool `json:"is_bookmarked"`
	Visible        bool `json:"visible"`
	IsMuted        bool `json:"is_muted"`
}

// ImageURLs is embedded in Illust, MetaPage, Novel
type ImageURLs struct {
	SquareMedium string `json:"square_medium"`
	Medium       string `json:"medium"`
	Large        string `json:"large"`
	Original     string `json:"original,omitempty"`
}

// NovelMarker is embedded in RespNovelText
type NovelMarker struct {
	Page int `json:"page"`
}

// Novel is embedded in RespNovelText, RespNovels
type Novel struct {
	ID             int       `json:"id"`
	Title          string    `json:"title"`
	Caption        string    `json:"caption"`
	Restrict       int       `json:"restrict"`
	XRestrict      int       `json:"x_restrict"`
	ImageURLs      ImageURLs `json:"image_urls"`
	CreateDate     time.Time `json:"create_date"`
	Tags           []Tag     `json:"tags"`
	PageCount      int       `json:"page_count"`
	TextLength     int       `json:"text_length"`
	User           User      `json:"user"`
	Series         Series    `json:"series"`
	IsBookmarked   bool      `json:"is_bookmarked"`
	TotalBookmarks int       `json:"total_bookmarks"`
	TotalView      int       `json:"total_view"`
	Visible        bool      `json:"visible"`
	TotalComments  int       `json:"total_comments"`
	IsMuted        bool      `json:"is_muted"`
	IsMypixivOnly  bool      `json:"is_mypixiv_only"`
	IsXRestricted  bool      `json:"is_x_restricted"`
}

// NovelSeriesDetail defines the detail of novel series
type NovelSeriesDetail struct {
	ID                  int    `json:"id"`
	Title               string `json:"title"`
	Caption             string `json:"caption"`
	IsOriginal          bool   `json:"is_original"`
	IsConcluded         bool   `json:"is_concluded"`
	ContentCount        int    `json:"content_count"`
	TotalCharacterCount int    `json:"total_character_count"`
	User                User   `json:"user"`
}

// Series is embedded in Illust(where Type="manga"), Novel
type Series struct {
	ID    int    `json:"id"`
	Title string `json:"title"`
}

// Tag is embedded in Illust, Novel
type Tag struct {
	Name                string `json:"name"`
	TranslatedName      string `json:"translated_name"`
	AddedByUploadedUser *bool  `json:"added_by_uploaded_user"`
}

// Comment is embedded in RespComments
type Comment struct {
	ID         int       `json:"id"`
	Comment    string    `json:"comment"`
	Date       time.Time `json:"date"`
	User       User      `json:"user"`
	HasReplies bool      `json:"has_replies"`
}

/*
type PrivacyPolicy struct {
	Version string `json:"version"`
	Message string `json:"message"`
	URL     string `json:"url"`
}
*/
